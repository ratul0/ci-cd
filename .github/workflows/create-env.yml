name: create networks for production and testing env

on:
  push:
    paths:
      - 'src/**'
      - 'cdk/**/*Service*'
      - 'cdk/pom.xml'
    branches: [ main ]
jobs:
  deploy-network-stack:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    name: Deploy the network stack
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0

      - name: NPM install
        run: cd cdk && npm install

      - name: Deploy network stack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd cdk
          npm run network:deploy -- -c environmentName=testing

  build-and-publish:
    needs: [ deploy-network-stack ]
    runs-on: ubuntu-20.04
    name: Build and publish App
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0

      - name: Build and test project
        run: ./mvnw -f pom.xml clean verify

      - name: Create Docker image tag
        id: dockerImageTag
        run: echo "::set-output name=tag::$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}"

      - name: Publish Docker image to ECR registry
        if: github.ref == 'refs/heads/main'
        env:
          DOCKER_IMAGE_TAG: ${{ steps.dockerImageTag.outputs.tag }}
        run: |
          docker build -t demo-app .
          docker tag demo-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/demo-app:${DOCKER_IMAGE_TAG}
          docker tag demo-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/demo-app:latest
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/demo-app:${DOCKER_IMAGE_TAG}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/demo-app:latest

      - name: NPM install
        run: cd cdk && npm install

      - name: Deploy service stack
        if: github.ref == 'refs/heads/main'
        run: |
          cd cdk
          npm run service:deploy -- -c environmentName=testing -c applicationName=demo-app -c dockerImageTag=${DOCKER_IMAGE_TAG}

      - name: Clean up old parameter stacks
        if: github.ref == 'refs/heads/main'
        run: |
          cd cdk
          aws cloudformation describe-stacks --region eu-central-1 --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "testing-demo-app-Service-Parameters" | sort -r | tail -n+2 > stacks_to_be_deleted.txt
          for stack in $(cat stacks_to_be_deleted.txt); do aws cloudformation delete-stack --stack-name $stack --region eu-central-1;  done